{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samuel M\\\\React\\\\Project\\\\project-app\\\\src\\\\components\\\\ImagePage.js\";\n\n/** @format */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { findImages } from '../redux/image/action';\nexport class ImagePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      console.log(this.props.client);\n      this.props.findImage(this.props.client.data.email);\n    };\n\n    this.removeImage = () => {};\n\n    this.state = {\n      imageList: this.props.image\n    };\n  }\n\n  render() {\n    console.log(this.props.image);\n    console.log('imagee');\n\n    if (this.props.loading == true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"wrapper-image-box\",\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"wrapper-image-list\",\n        style: {\n          display: 'flex',\n          flexFlow: 'row wrap',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          alignItems: 'center',\n          alignContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 6\n        }\n      }, this.props.image.map(({\n        name,\n        type,\n        data,\n        id\n      }, index) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"list-image\",\n        key: index + '-' + id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        width: \"100px\",\n        height: \"100px\",\n        src: `data:image/${type};base64,${data}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 10\n        }\n      }, name), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: this.removeImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Sterge\")))))));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    locales: state.locale.lang,\n    client: state.users.user,\n    image: state.image.image,\n    loading: state.image.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findImage: id => dispatch(findImages(id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImagePage);","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/components/ImagePage.js"],"names":["React","Component","connect","findImages","ImagePage","constructor","props","componentDidMount","console","log","client","findImage","data","email","removeImage","state","imageList","image","render","loading","width","height","display","flexFlow","justifyContent","flexDirection","alignItems","alignContent","map","name","type","id","index","mapStateToProps","locales","locale","lang","users","user","mapDispatchToProps","dispatch"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AACxCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAOnBC,iBAPmB,GAOC,MAAM;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,MAAvB;AACA,WAAKJ,KAAL,CAAWK,SAAX,CAAqB,KAAKL,KAAL,CAAWI,MAAX,CAAkBE,IAAlB,CAAuBC,KAA5C;AACA,KAVkB;;AAAA,SAYnBC,WAZmB,GAYL,MAAM,CAAE,CAZH;;AAElB,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,KAAKV,KAAL,CAAWW;AADV,KAAb;AAGA;;AASDC,EAAAA,MAAM,GAAG;AACRV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWW,KAAvB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAI,KAAKH,KAAL,CAAWa,OAAX,IAAsB,IAA1B,EAAgC;AAC/B,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACA,KAFD,MAEO;AACN,0BACC;AAAK,QAAA,EAAE,EAAC,mBAAR;AAA4B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,MAAM,EAAE;AAAzB,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AACC,QAAA,EAAE,EAAC,oBADJ;AAEC,QAAA,KAAK,EAAE;AACNC,UAAAA,OAAO,EAAE,MADH;AAENC,UAAAA,QAAQ,EAAE,UAFJ;AAGNC,UAAAA,cAAc,EAAE,QAHV;AAINC,UAAAA,aAAa,EAAE,QAJT;AAKNC,UAAAA,UAAU,EAAE,QALN;AAMNC,UAAAA,YAAY,EAAE;AANR,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUE,KAAKrB,KAAL,CAAWW,KAAX,CAAiBW,GAAjB,CAAqB,CAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAclB,QAAAA,IAAd;AAAoBmB,QAAAA;AAApB,OAAD,EAA2BC,KAA3B,kBACrB;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAEA,KAAK,GAAG,GAAR,GAAcD,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AACC,QAAA,KAAK,EAAC,OADP;AAEC,QAAA,MAAM,EAAC,OAFR;AAGC,QAAA,GAAG,EAAG,cAAaD,IAAK,WAAUlB,IAAK,EAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIiB,IAAJ,CADD,eAEC;AAAK,QAAA,OAAO,EAAE,KAAKf,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,CAFD,CAND,CADA,CAVF,CADD,CADD;AA8BA;AACD;;AApDuC;;AAuDzC,MAAMmB,eAAe,GAAIlB,KAAD,IAAW;AAClC,SAAO;AACNmB,IAAAA,OAAO,EAAEnB,KAAK,CAACoB,MAAN,CAAaC,IADhB;AAEN1B,IAAAA,MAAM,EAAEK,KAAK,CAACsB,KAAN,CAAYC,IAFd;AAGNrB,IAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYA,KAHb;AAINE,IAAAA,OAAO,EAAEJ,KAAK,CAACE,KAAN,CAAYE;AAJf,GAAP;AAMA,CAPD;;AAQA,MAAMoB,kBAAkB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACN7B,IAAAA,SAAS,EAAGoB,EAAD,IAAQS,QAAQ,CAACrC,UAAU,CAAC4B,EAAD,CAAX;AADrB,GAAP;AAGA,CAJD;;AAKA,eAAe7B,OAAO,CAAC+B,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CnC,SAA7C,CAAf","sourcesContent":["/** @format */\r\n\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { findImages } from '../redux/image/action';\r\n\r\nexport class ImagePage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\timageList: this.props.image,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tconsole.log(this.props.client);\r\n\t\tthis.props.findImage(this.props.client.data.email);\r\n\t};\r\n\r\n\tremoveImage = () => {};\r\n\r\n\trender() {\r\n\t\tconsole.log(this.props.image);\r\n\t\tconsole.log('imagee');\r\n\t\tif (this.props.loading == true) {\r\n\t\t\treturn <div>Loading...</div>;\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div id='wrapper-image-box' style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tid='wrapper-image-list'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\tflexFlow: 'row wrap',\r\n\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t\tflexDirection: 'column',\r\n\t\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\t\talignContent: 'center',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{this.props.image.map(({ name, type, data, id }, index) => (\r\n\t\t\t\t\t\t\t<div className=\"list-image\" key={index + '-' + id}>\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\twidth='100px'\r\n\t\t\t\t\t\t\t\t\theight='100px'\r\n\t\t\t\t\t\t\t\t\tsrc={`data:image/${type};base64,${data}`}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<p>{name}</p>\r\n\t\t\t\t\t\t\t\t\t<div onClick={this.removeImage}>\r\n\t\t\t\t\t\t\t\t\t\t<a>Sterge</a>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tlocales: state.locale.lang,\r\n\t\tclient: state.users.user,\r\n\t\timage: state.image.image,\r\n\t\tloading: state.image.loading,\r\n\t};\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tfindImage: (id) => dispatch(findImages(id)),\r\n\t};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImagePage);\r\n"]},"metadata":{},"sourceType":"module"}