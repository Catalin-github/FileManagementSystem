{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE, REGISTER_SUCCESS } from \"./actionType\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport React, { Component } from 'react';\nimport Dashboard from \"../../components/Dashboard\"; //import { useHistory } from \"react-router-dom\";\n// const history = useHistory();\n\nexport const fetchUsersLogin = data => {\n  return dispatch => {\n    console.log(data.email);\n    console.log(data.password);\n    axios({\n      method: 'POST',\n      url: '/dia-aplication/api/user/login',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        email: data.email,\n        password: data.password\n      },\n      credentials: \"include\"\n    }).then(res => {\n      console.log(res);\n      console.log(\"sadsdsadadadasdasdas\");\n\n      if (res.success === false) {\n        throw new Error('Email or password incorect!');\n      }\n\n      console.log(\"you are in login\");\n      console.log(res.data);\n      console.log(res.data.dataUserResponse);\n      dispatch(loginSuccess({\n        data: res.data.dataUserResponse,\n        success: res.data.success,\n        message: res.data.message\n      }));\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()) ///////////\n    .then(res => {\n      console.log(res);\n      console.log(res.dataUserResponse);\n      console.log(res.dataUserResponse.firstName);\n\n      if (res.success === false) {\n        throw new Error('Your data is invalid!');\n      }\n\n      dispatch(registerSuccess({\n        data: res.dataUserResponse,\n        message: res.message,\n        succes: res.success\n      })); //    history.push(\"/\");\n      // return( <Redirect exact to=\"/dashboard\"/>)    \n\n      console.log(\"true\");\n      return true;\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const verifyAuthentication = () => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n\n      if (!res.success) {\n        throw new Error('You are not authenticated!');\n      }\n\n      if (res.success) {\n        dispatch(loginSuccess({\n          data: res.dataUserResponse\n        }));\n      }\n\n      if (window.location.pathname === \"/account\") {\n        dispatch(loginRequest());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const verifyRefreshToken = () => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\n      mothod: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.dataUserResponse\n      };\n\n      if (res.verifyToken) {\n        dispatch(loginSuccess(user));\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    fetch(\"http://localhost:5000/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      console.log(\"here\");\n\n      if (res.status == 200) {\n        dispatch(loginError());\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersEditProfile = (data, verifyToken) => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/update`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      if (res.success == true) {}\n\n      dispatch(loginSuccess({\n        data: res.user\n      }));\n      dispatch(editProfile());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const changePassword = data => {\n  return dispatch => {\n    fetch(`http://localhost:5000/ChangePassword`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchLoginGoogle = res => {\n  return dispatch => {\n    axios({\n      url: '/dia-aplication/api/user/google',\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        'Access-Control-Allow-Credentials': true,\n        'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        \"Vary\": \"Origin\",\n        \"Origin\": \"http://localhost:3000\",\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        token: res.tokenId\n      }\n    }).then(res => {\n      console.log(res);\n      console.log(\"you are in login2222222222222222222222222222222222222222222222222222222222222222222222\");\n      console.log(res.data);\n      console.log(res.data.user);\n      console.log(res.data.dataUserResponse); // dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.dta.success, message:res.data.message }));\n    }).catch(err => {\n      console.log(err + \"you are here\");\n      console.log(\"dssssssssssssssssssssssssssssssssssyou are here\");\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const fetchLoginFacebook = tokenId => {\n  return dispatch => {\n    fetch(\"/login/api/user/auth/facebook\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": `application/json`\n      },\n      body: JSON.stringify(tokenId),\n      credentials: \"include\"\n    }).then(res => {\n      return res.json();\n    }).then(res => {\n      if (res.success === false || res.message === \"\") {\n        throw new Error('Email or password incorect!');\n      }\n\n      dispatch(loginSuccess({\n        data: res.user,\n        success: res.success,\n        message: res.message\n      }));\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const AccountRequest = () => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/account`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(\"accccc\");\n\n      if (res.success == false) {\n        throw new Error('my error');\n      }\n\n      console.log(res.dataUserResponse);\n      dispatch(loginSuccess({\n        data: res.dataUserResponse,\n        success: res.success\n      }));\n    }).catch(err => {\n      console.log(err.message);\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUserDeleteAccount = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => {\n      dispatch(editProfile());\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const editProfile = () => {\n  return {\n    type: EDIT_PROFILE\n  };\n};\nexport const registerSuccess = res => {\n  return {\n    type: REGISTER_SUCCESS,\n    payload: res\n  };\n}; // export const resetValidation=()=>{\n//   return{\n//     type:RESET_VALIDATION\n//   }\n// }\n// export const fetchUsersData = (data) => {\n//   return (dispatch) => {\n//     dispatch(loginRequest());\n//     fetch(\"http://localhost:5000/MyAccount\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         dispatch(loginSuccess(data));\n//       })\n//       .catch((err) => {\n//         dispatch(loginError());\n//       });\n//   };\n// };\n// export const fetchUsersRegister_GET = (data) => {\n//   return (dispatch) => {\n//     fetch(`http://localhost:5000/register`, {\n//       method: \"GET\",\n//       body: JSON.stringify(),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       credentials: \"include\",\n//     })\n//       .then((res) => {\n//         if (res.status === 200) {\n//           dispatch(loginSuccess(data));\n//         } else {\n//           console.log(res);\n//           const error = new Error(res);\n//           throw error;\n//         }\n//       })\n//       .catch((err) => {\n//         dispatch(loginError(err));\n//       });\n//   };\n// };","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","EDIT_PROFILE","REGISTER_SUCCESS","axios","Redirect","React","Component","Dashboard","fetchUsersLogin","data","dispatch","console","log","email","password","method","url","headers","credentials","then","res","success","Error","dataUserResponse","loginSuccess","message","catch","err","loginError","fetchUsersRegister","fetch","body","JSON","stringify","json","firstName","registerSuccess","succes","error","value","verifyAuthentication","window","location","pathname","loginRequest","verifyRefreshToken","mothod","user","verifyToken","logoutUser","status","fetchUsersEditProfile","authorization","editProfile","changePassword","fetchLoginGoogle","token","tokenId","fetchLoginFacebook","AccountRequest","fetchUserDeleteAccount","type","payload"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCES,\r\n  LOGIN_ERROR,\r\n  EDIT_PROFILE,\r\n  REGISTER_SUCCESS\r\n} from \"./actionType\";\r\nimport axios from \"axios\"\r\nimport { Redirect } from \"react-router-dom\";\r\nimport React, { Component }  from 'react';\r\nimport Dashboard from \"../../components/Dashboard\";\r\n//import { useHistory } from \"react-router-dom\";\r\n// const history = useHistory();\r\n\r\n\r\nexport const fetchUsersLogin = (data) => {\r\n  return (dispatch) => {\r\n    console.log(data.email)\r\n    console.log(data.password)\r\n    axios({\r\n      method: 'POST',\r\n      url: '/dia-aplication/api/user/login',\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n\r\n      data: {\r\n        email: data.email,\r\n        password: data.password\r\n      },\r\n      credentials:\"include\"\r\n    }) \r\n      .then((res) => {\r\n        console.log(res)\r\n        console.log(\"sadsdsadadadasdasdas\")\r\n        if(res.success === false){ \r\n          throw new Error('Email or password incorect!');\r\n        }       \r\n        console.log(\"you are in login\")\r\n        console.log(res.data)\r\n         console.log(res.data.dataUserResponse)\r\n\r\n        dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.data.success, message:res.data.message }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n}\r\n\r\nexport const fetchUsersRegister =   (data) => {\r\n  return  (dispatch) => {\r\n\r\n      fetch(`/dia-aplication/api/user/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n       .then((res) => res.json())///////////\r\n      .then((res) => {\r\n console.log(res)\r\n console.log(res.dataUserResponse)\r\n console.log(res.dataUserResponse.firstName)\r\n\r\n if(res.success === false){ \r\n          throw new Error('Your data is invalid!');\r\n        }      \r\n        dispatch(registerSuccess({ data: res.dataUserResponse, message: res.message, succes:res.success}));\r\n  //    history.push(\"/\");\r\n           // return( <Redirect exact to=\"/dashboard\"/>)    \r\n           console.log(\"true\")\r\n     return true\r\n    })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const verifyAuthentication = ( ) => {\r\n  return (dispatch) => {\r\n  \r\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\r\n      method: \"GET\",\r\n      headers: {  \"Content-Type\": \"application/json\",   },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json()) \r\n      .then((res) => {\r\n        console.log(res)\r\n        if (!res.success) {\r\n          throw new Error('You are not authenticated!');\r\n        }\r\n\r\n        if (res.success) {\r\n          dispatch(loginSuccess({ data: res.dataUserResponse}));\r\n        }\r\n        if(window.location.pathname === \"/account\"){\r\n          dispatch(loginRequest() )\r\n        }\r\n      })\r\n\r\n      .catch((err) => {       \r\n        console.log(err)\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const verifyRefreshToken = () => {\r\n  return (dispatch) => {\r\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\r\n      mothod: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n   \r\n        const user = { data: res.dataUserResponse  };\r\n\r\n        if (res.verifyToken) {\r\n          dispatch(loginSuccess(user));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  return (dispatch) => {\r\n    fetch(\"http://localhost:5000/logout\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        console.log(\"here\");\r\n        if (res.status == 200) {\r\n          dispatch(loginError());\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersEditProfile = (data, verifyToken) => {\r\n\r\n  return (dispatch) => {\r\n\r\n    fetch(`/dia-aplication/api/user/update`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if(res.success==true){}\r\n        dispatch(loginSuccess({ data: res.user }));\r\n\r\n   \r\n        dispatch(editProfile());\r\n      })\r\n      .catch((err) => {\r\n\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const changePassword = (data) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/ChangePassword`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchLoginGoogle = (res) => {\r\n  return (dispatch) => {\r\n    axios({\r\n       url: '/dia-aplication/api/user/google',\r\n      headers: {\"Access-Control-Allow-Origin\": \"http://localhost:3000\",'Access-Control-Allow-Credentials':true,'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\"Vary\": \"Origin\",\"Origin\":\"http://localhost:3000\", \"Content-Type\": \"application/json\"},\r\n      data: {  token: res.tokenId, } \r\n    }) \r\n      .then((res) => {\r\n        console.log(res)      \r\n        console.log(\"you are in login2222222222222222222222222222222222222222222222222222222222222222222222\")\r\n        console.log(res.data)\r\n        console.log(res.data.user)\r\n        console.log(res.data.dataUserResponse)\r\n  // dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.dta.success, message:res.data.message }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err+ \"you are here\")\r\n        console.log(\"dssssssssssssssssssssssssssssssssssyou are here\")\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchLoginFacebook = (tokenId) => {\r\n  return (dispatch) => {  \r\n    fetch(\"/login/api/user/auth/facebook\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": `application/json` },\r\n      body: JSON.stringify(tokenId),\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) =>{   \r\n      return res.json()\r\n      })\r\n      .then((res) => {\r\n        if(res.success === false || res.message === \"\"){ \r\n          throw new Error('Email or password incorect!');\r\n        }\r\n        dispatch(loginSuccess({ data: res.user, success: res.success, message:res.message }))\r\n             \r\n       })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const AccountRequest = () => {\r\n  return (dispatch) => {\r\n      fetch(`/dia-aplication/api/user/account`, {\r\n      method: \"GET\",\r\n       headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(\"accccc\")\r\n        if(res.success==false){\r\n          throw new Error('my error');\r\n         }\r\n        console.log(res.dataUserResponse)\r\n        dispatch(loginSuccess({ data: res.dataUserResponse ,success: res.success}));\r\n\r\n   \r\n      })\r\n      .catch((err) => {\r\n\r\n      console.log(err.message)\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchUserDeleteAccount = (verifyToken) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        dispatch(editProfile());\r\n\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const editProfile = () => {\r\n  return {\r\n    type: EDIT_PROFILE,\r\n  };\r\n};\r\nexport const registerSuccess = (res) => {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n    payload: res,\r\n  };\r\n};\r\n\r\n// export const resetValidation=()=>{\r\n//   return{\r\n//     type:RESET_VALIDATION\r\n//   }\r\n// }\r\n\r\n// export const fetchUsersData = (data) => {\r\n//   return (dispatch) => {\r\n//     dispatch(loginRequest());\r\n//     fetch(\"http://localhost:5000/MyAccount\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         dispatch(loginSuccess(data));\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError());\r\n//       });\r\n//   };\r\n// };\r\n\r\n\r\n\r\n// export const fetchUsersRegister_GET = (data) => {\r\n//   return (dispatch) => {\r\n\r\n//     fetch(`http://localhost:5000/register`, {\r\n//       method: \"GET\",\r\n//       body: JSON.stringify(),\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       credentials: \"include\",\r\n//     })\r\n//       .then((res) => {\r\n//         if (res.status === 200) {\r\n//           dispatch(loginSuccess(data));\r\n//         } else {\r\n//           console.log(res);\r\n//           const error = new Error(res);\r\n//           throw error;\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError(err));\r\n//       });\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}