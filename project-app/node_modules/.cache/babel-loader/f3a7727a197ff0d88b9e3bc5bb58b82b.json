{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR } from \"./actionType\"; // import cookie from \"js-cookie\";\n\nexport const fetchUsersLogin = ({\n  username,\n  password\n}) => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: {\n        username: username,\n        password: password\n      } //\"password\"),\n\n    }).then(res => {\n      // cookie.set(\"token\", res.data.access_token);\n      // cookie.set(\"user\", res.data.user);\n      // this.props.history.push(\"/profile\");\n      console.log(res.status);\n      console.log(res);\n      console.log(res.text());\n\n      if (res.status === 201) {\n        console.log(res);\n        dispatch(this.loginSuccess());\n        console.log(\"Succes\");\n      } else {\n        console.log(res);\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError());\n      console.error(err.value);\n      console.log(\"2111111113222222222222222222\");\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSucces = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res.data\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:2000/api/user/create`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      // cookie.set(\"token\", res.data.access_token);\n      // cookie.set(\"user\", res.data.user);\n      //////// this.props.history.push(\"/profile\");\n      if (res.status === 201) {\n        dispatch(this.loginSuccess(res));\n        console.log(res.email);\n        console.log(res.headers);\n        console.log(\"Succes\");\n      } else {\n        console.log(res);\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const fetchUsersData = ({\n  username,\n  password\n}) => {\n  return dispatch => {\n    dispatch(this.loginRequest());\n    fetch(\"http://localhost:5080/login\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: {\n        username: username,\n        password: password\n      } //\"password\"),\n\n    }).then(res => {\n      console.log(res.status);\n      console.log(res.text());\n      console.log(\"Salutttttttttttttttt\");\n      console.log(res.body);\n\n      if (res.status === 200) {\n        console.log(res);\n        dispatch(this.loginSuccess());\n        console.log(\"Succes\");\n      } else {\n        console.log(res);\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError());\n      console.error(err.value);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","fetchUsersLogin","username","password","dispatch","loginRequest","fetch","method","headers","body","then","res","console","log","status","text","loginSuccess","error","Error","catch","err","loginError","value","type","loginSucces","payload","data","fetchUsersRegister","JSON","stringify","email","fetchUsersData"],"mappings":"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","sourcesContent":["import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR } from \"./actionType\";\r\n// import cookie from \"js-cookie\";\r\nexport const fetchUsersLogin = ({ username, password }) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: { username: username, password: password }, //\"password\"),\r\n    })\r\n      .then((res) => {\r\n        // cookie.set(\"token\", res.data.access_token);\r\n        // cookie.set(\"user\", res.data.user);\r\n       // this.props.history.push(\"/profile\");\r\n        console.log(res.status);\r\n        console.log(res);\r\n        console.log(res.text());\r\n        if (res.status === 201) {\r\n          console.log(res);\r\n\r\n          dispatch(this.loginSuccess());\r\n          console.log(\"Succes\");\r\n        } else {\r\n          console.log(res);\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError());\r\n        console.error(err.value);\r\n        console.log(\"2111111113222222222222222222\");\r\n      });\r\n  };\r\n};\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSucces = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res.data,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\nexport const fetchUsersRegister = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(`http://localhost:2000/api/user/create`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // cookie.set(\"token\", res.data.access_token);\r\n        // cookie.set(\"user\", res.data.user);\r\n        //////// this.props.history.push(\"/profile\");\r\n        if (res.status === 201) {\r\n          dispatch(this.loginSuccess(res));\r\n          console.log(res.email);\r\n          console.log(res.headers);\r\n          console.log(\"Succes\");\r\n        } else {\r\n          console.log(res);\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersData = ({ username, password }) => {\r\n  return (dispatch) => {\r\n    dispatch(this.loginRequest());\r\n    fetch(\"http://localhost:5080/login\", {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: { username: username, password: password }, //\"password\"),\r\n    })\r\n      .then((res) => {\r\n        console.log(res.status);\r\n        console.log(res.text());\r\n        console.log(\"Salutttttttttttttttt\");\r\n        console.log(res.body);\r\n        if (res.status === 200) {\r\n          console.log(res);\r\n\r\n          dispatch(this.loginSuccess());\r\n          console.log(\"Succes\");\r\n        } else {\r\n          console.log(res);\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError());\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}