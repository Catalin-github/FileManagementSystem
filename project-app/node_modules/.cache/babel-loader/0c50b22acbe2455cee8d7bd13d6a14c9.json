{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE } from \"./actionType\";\nexport const fetchUsersLogin = ({\n  email,\n  password\n}) => {\n  const data = {\n    email,\n    password\n  };\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": `application/json`\n      },\n      body: JSON.stringify(data),\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      dispatch(loginSuccess({\n        user\n      }));\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:5000/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      // res.verifyToken = \"\";\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      console.log(`here you have res.data ${user.verifyToken} ttt`);\n\n      if (user.verifyToken) {\n        console.log(\"true\");\n      } else if (!user.verifyToken) {\n        console.log(\"false\");\n      }\n\n      dispatch(loginSuccess(user));\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n}; // export const fetchUsersData = (data) => {\n//   return (dispatch) => {\n//     dispatch(loginRequest());\n//     fetch(\"http://localhost:5000/MyAccount\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         dispatch(loginSuccess(data));\n//       })\n//       .catch((err) => {\n//         dispatch(loginError());\n//       });\n//   };\n// };\n\nexport const verifyAuthentication = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:5000/verifyToken`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      dispatch(loginSuccess(user));\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const verifyRefreshToken = () => {\n  return dispatch => {\n    fetch(`http://localhost:5000/refreshToken`, {\n      mothod: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(`aici ai ${res.verifyToken}`);\n\n      if (!res.verifyToken) {\n        dispatch(loginError());\n      }\n\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n\n      if (res.verifyToken) {\n        dispatch(loginSuccess(user));\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n}; // export const fetchUsersRegister_GET = (data) => {\n//   return (dispatch) => {\n//     fetch(`http://localhost:5000/register`, {\n//       method: \"GET\",\n//       body: JSON.stringify(),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       credentials: \"include\",\n//     })\n//       .then((res) => {\n//         if (res.status === 200) {\n//           dispatch(loginSuccess(data));\n//         } else {\n//           console.log(res);\n//           const error = new Error(res);\n//           throw error;\n//         }\n//       })\n//       .catch((err) => {\n//         dispatch(loginError(err));\n//       });\n//   };\n// };\n\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/logout\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch(loginError());\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersEditProfile = (data, verifyToken) => {\n  console.log(`esti in edit INAINTE DE RETURN iar asta e verifytoken: ${verifyToken}`);\n  return dispatch => {\n    console.log(\"esti in edit INAINTE DE FETCH\");\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      console.log(\"esti in edit inainte login succes\");\n      dispatch(loginSuccess(user));\n      console.log(\"esti in edit dupa login succes\"); // if (!user.verifyToken) {\n      //   dispatch(loginError());\n      // }\n\n      dispatch(editProfile());\n    }).catch(err => {\n      console.log(\"esti in edit IN CATCH\");\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const changePassword = data => {\n  return dispatch => {\n    fetch;\n  };\n};\nexport const fetchUserDeleteAccount = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"authorization\": `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => {\n      dispatch(editProfile());\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const editProfile = () => {\n  return {\n    type: EDIT_PROFILE\n  };\n};","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","EDIT_PROFILE","fetchUsersLogin","email","password","data","dispatch","loginRequest","fetch","method","headers","body","JSON","stringify","credentials","then","res","json","user","verifyToken","loginSuccess","catch","err","loginError","fetchUsersRegister","console","log","error","value","verifyAuthentication","authorization","verifyRefreshToken","mothod","logoutUser","status","fetchUsersEditProfile","editProfile","changePassword","fetchUserDeleteAccount","type","payload"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCES,\r\n  LOGIN_ERROR,\r\n  EDIT_PROFILE,\r\n} from \"./actionType\";\r\n\r\nexport const fetchUsersLogin = ({ email, password }) => {\r\n  const data = {\r\n    email,\r\n    password,\r\n  };\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": `application/json` },\r\n      body: JSON.stringify(data),\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        dispatch(loginSuccess({ user }));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersRegister = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n\r\n    fetch(`http://localhost:5000/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        // res.verifyToken = \"\";\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n        console.log(`here you have res.data ${user.verifyToken} ttt`);\r\n        if (user.verifyToken) {\r\n          console.log(\"true\");\r\n        } else if (!user.verifyToken) {\r\n          console.log(\"false\");\r\n        }\r\n        dispatch(loginSuccess(user));\r\n      })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n// export const fetchUsersData = (data) => {\r\n//   return (dispatch) => {\r\n//     dispatch(loginRequest());\r\n//     fetch(\"http://localhost:5000/MyAccount\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         dispatch(loginSuccess(data));\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError());\r\n//       });\r\n//   };\r\n// };\r\nexport const verifyAuthentication = (verifyToken) => {\r\n  return (dispatch) => {\r\n\r\n    fetch(`http://localhost:5000/verifyToken`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        dispatch(loginSuccess(user));\r\n      })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\nexport const verifyRefreshToken = () => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/refreshToken`, {\r\n      mothod: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(`aici ai ${res.verifyToken}`);\r\n        if (!res.verifyToken) {\r\n          dispatch(loginError());\r\n        }\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        if (res.verifyToken) {\r\n          dispatch(loginSuccess(user));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n// export const fetchUsersRegister_GET = (data) => {\r\n//   return (dispatch) => {\r\n  \r\n\r\n//     fetch(`http://localhost:5000/register`, {\r\n//       method: \"GET\",\r\n//       body: JSON.stringify(),\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       credentials: \"include\",\r\n//     })\r\n//       .then((res) => {\r\n//         if (res.status === 200) {\r\n//           dispatch(loginSuccess(data));\r\n//         } else {\r\n//           console.log(res);\r\n//           const error = new Error(res);\r\n//           throw error;\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError(err));\r\n//       });\r\n//   };\r\n// };\r\n\r\nexport const logoutUser = () => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/logout\", {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          dispatch(loginError());\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersEditProfile = (data, verifyToken) => {\r\n  console.log(\r\n    `esti in edit INAINTE DE RETURN iar asta e verifytoken: ${verifyToken}`\r\n  );\r\n\r\n  return (dispatch) => {\r\n    console.log(\"esti in edit INAINTE DE FETCH\");\r\n\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n        console.log(\"esti in edit inainte login succes\");\r\n\r\n        dispatch(loginSuccess(user));\r\n        console.log(\"esti in edit dupa login succes\");\r\n\r\n        // if (!user.verifyToken) {\r\n        //   dispatch(loginError());\r\n        // }\r\n        dispatch(editProfile());\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"esti in edit IN CATCH\");\r\n\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const changePassword =(data) =>{\r\n  return (dispatch) => {\r\n    fetch\r\n  }\r\n}\r\n\r\nexport const fetchUserDeleteAccount = (verifyToken) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"DELETE\",\r\n      headers: { \r\n        \"Content-Type\": \"application/json\",\r\n        \"authorization\": `Baerer ${verifyToken}`\r\n     },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        dispatch(editProfile());\r\n\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const editProfile = () => {\r\n  return {\r\n    type: EDIT_PROFILE,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}