{"ast":null,"code":"import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE } from \"./actionType\";\nimport Cookies from \"js-cookie\"; // import cookie from \"js-cookie\";\n//  USER POST LOGIN LOGIN LOGIN\n//  USER POST LOGIN LOGIN LOGIN\n//  USER POST LOGIN LOGIN LOGIN\n\nexport const fetchUsersLogin = ({\n  email,\n  password\n}) => {\n  const data = {\n    email,\n    password\n  };\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      credentials: \"include\"\n    }).then(res => {\n      console.log(data);\n\n      if (res.status === 200) {\n        dispatch(loginSuccess({\n          email,\n          password\n        })); // const error = new Error(res);\n        // throw error;\n      } else {\n        const error = new Error(res);\n        throw error;\n      }\n\n      console.log(res.status);\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n}; // USER REGISTER REGISTER REGISTER POST\n// USER REGISTER REGISTER REGISTER POST\n// USER REGISTER REGISTER REGISTER POST\n\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:5000/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(Cookies.get(\"jwt\"));\n      console.log(\"SALUT SALUT SALUT SALUT SALTU\"); // console.log(res.headers);\n      //   if (res.status === \"200\") {\n      // Cookies.set('number',\"the value\")\n\n      console.log(\"Aici primesti datale cu res\"); //\n\n      console.log(res);\n      console.log(\"Aici primesti datale cu resdata\");\n      console.log(res.data);\n      const user = res.data; // this.setState({userss:res.data})\n      // console.log(res.Cookies);\n      //const userss = [{id:'0000', email:'000000000'}]\n      //console.log(res.json());\n      // console.log(Cookies.get());\n      // console.log(JSOole.log(\"Aici primesti datale\");\n      ////////////  dispatch(loginSuccess({user}));\n\n      dispatch(loginSuccess(user)); // } else {\n      //   console.log(res);\n      //   const error = new Error(res);\n      //   throw error;\n      // }\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n}; // GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\n\nexport const fetchUsersData = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/MyAccount\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"access-token\": `Baerer${Cookies.get(\"jwt\")}`\n      }\n    }).then(res => {\n      dispatch(loginSuccess(data));\n    }).catch(err => {\n      dispatch(loginError());\n      console.error(err.value);\n    });\n  };\n};\nexport const verifyAuthentication = () => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:5000/verifyToken`, {\n      method: \"GET\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"access-token\": `Baerer ${Cookies.get(\"jwt\")}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      // if (res.status === 200) {\n      //   dispatch(loginSuccess());\n      // } else {\n      //   //  console.log(res);\n      //   const error = new Error(res);\n      //   throw error;\n      // }\n      const user = res.data;\n      dispatch(loginSuccess(user));\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n}; // GET GET  REGISTER REGISTER REGISTER\n// GET GET  REGISTER REGISTER REGISTER\n// GET GET  REGISTER REGISTER REGISTER\n// GET GET  REGISTER REGISTER REGISTER\n\nexport const fetchUsersRegister_GET = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:5000/register`, {\n      method: \"GET\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch(loginSuccess(data));\n      } else {\n        console.log(res);\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const logoutUser = () => {\n  console.log(\"DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_\");\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/logout\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentialls: \"include\"\n    }).then(res => {\n      console.log(\"DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_\");\n      Cookies.remove(\"jwt\");\n\n      if (res.status === 200) {}\n\n      dispatch(loginError()); // } else {\n      //   console.log(res); \n      //   const error = new Error(res);\n      //   throw error;\n      // }\n    }); // .catch((err) => {\n    //   dispatch(loginError(err));\n    //   console.error(err.value);\n    // });\n  };\n};\nexport const fetchUsersEditProfile = data => {\n  return dispatch => {\n    fetch(`http://localhost:5000/editProfile`), {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': \"application/json\"\n      },\n      credentials\n    };\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const editProfile = () => {\n  return {\n    type: EDIT_PROFILE\n  };\n};","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["React","Redirect","LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","EDIT_PROFILE","Cookies","fetchUsersLogin","email","password","data","dispatch","loginRequest","fetch","method","headers","body","JSON","stringify","credentials","then","res","console","log","status","loginSuccess","error","Error","catch","err","loginError","fetchUsersRegister","json","get","user","value","fetchUsersData","verifyAuthentication","fetchUsersRegister_GET","logoutUser","credentialls","remove","fetchUsersEditProfile","type","payload","editProfile"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE } from \"./actionType\";\r\nimport Cookies from \"js-cookie\";\r\n// import cookie from \"js-cookie\";\r\n\r\n//  USER POST LOGIN LOGIN LOGIN\r\n//  USER POST LOGIN LOGIN LOGIN\r\n//  USER POST LOGIN LOGIN LOGIN\r\nexport const fetchUsersLogin = ({ email, password }) => {\r\n  const data = {\r\n    email,\r\n    password,\r\n  };\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n          console.log(data);\r\n          if(res.status === 200){ \r\n          dispatch(loginSuccess({ email, password }));\r\n          // const error = new Error(res);\r\n          // throw error;\r\n      }else{\r\n         const error = new Error(res);\r\n          throw error;\r\n      }\r\n        console.log(res.status);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n// USER REGISTER REGISTER REGISTER POST\r\n// USER REGISTER REGISTER REGISTER POST\r\n// USER REGISTER REGISTER REGISTER POST\r\nexport const fetchUsersRegister = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n\r\n    fetch(`http://localhost:5000/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n       \r\n        console.log(Cookies.get(\"jwt\"));\r\n        console.log(\"SALUT SALUT SALUT SALUT SALTU\");\r\n        // console.log(res.headers);\r\n        //   if (res.status === \"200\") {\r\n        // Cookies.set('number',\"the value\")\r\n        console.log(\"Aici primesti datale cu res\");\r\n        //\r\n        console.log(res);\r\n        console.log(\"Aici primesti datale cu resdata\");\r\n        console.log(res.data);\r\n        const user = res.data\r\n        // this.setState({userss:res.data})\r\n        // console.log(res.Cookies);\r\n//const userss = [{id:'0000', email:'000000000'}]\r\n        //console.log(res.json());\r\n\r\n        // console.log(Cookies.get());\r\n        // console.log(JSOole.log(\"Aici primesti datale\");\r\n      ////////////  dispatch(loginSuccess({user}));\r\n        dispatch(loginSuccess(user));\r\n        // } else {\r\n        //   console.log(res);\r\n        //   const error = new Error(res);\r\n        //   throw error;\r\n        // }\r\n      })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\r\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\r\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\r\nexport const fetchUsersData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/MyAccount\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"access-token\": `Baerer${Cookies.get(\"jwt\")}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        dispatch(loginSuccess(data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError());\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\nexport const verifyAuthentication = () => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(`http://localhost:5000/verifyToken`, {\r\n      method: \"GET\",\r\n      body: JSON.stringify(),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"access-token\": `Baerer ${Cookies.get(\"jwt\")}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        // if (res.status === 200) {\r\n        //   dispatch(loginSuccess());\r\n        // } else {\r\n        //   //  console.log(res);\r\n        //   const error = new Error(res);\r\n        //   throw error;\r\n        // }\r\n        const user = res.data\r\n\r\n        dispatch(loginSuccess(user));\r\n      })\r\n      \r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n// GET GET  REGISTER REGISTER REGISTER\r\n// GET GET  REGISTER REGISTER REGISTER\r\n// GET GET  REGISTER REGISTER REGISTER\r\n// GET GET  REGISTER REGISTER REGISTER\r\nexport const fetchUsersRegister_GET = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n\r\n    fetch(`http://localhost:5000/register`, {\r\n      method: \"GET\",\r\n      body: JSON.stringify(),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          dispatch(loginSuccess(data));\r\n        } else {\r\n          console.log(res);\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  console.log(\r\n    \"DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_\"\r\n  );\r\n\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/logout\", {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentialls: \"include\",\r\n    }).then((res) => {\r\n      console.log(\r\n        \"DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_DELETE_\"\r\n      );\r\n      Cookies.remove(\"jwt\");\r\n\r\n      if (res.status === 200) {\r\n         }   dispatch(loginError());\r\n      // } else {\r\n      //   console.log(res); \r\n      //   const error = new Error(res);\r\n      //   throw error;\r\n      // }\r\n    });\r\n    // .catch((err) => {\r\n    //   dispatch(loginError(err));\r\n    //   console.error(err.value);\r\n    // });\r\n  };\r\n};\r\n\r\nexport const fetchUsersEditProfile = (data) => {\r\n  return(dispatch) => {\r\n    fetch(`http://localhost:5000/editProfile`),{\r\n      method:'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {'Content-Type':\"application/json\"},\r\n      credentials\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const editProfile = () => {\r\n  return {\r\n    type: EDIT_PROFILE,\r\n    \r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}