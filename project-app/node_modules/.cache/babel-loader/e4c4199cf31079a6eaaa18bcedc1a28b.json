{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE } from \"./actionType\";\nexport const fetchUsersLogin = ({\n  email,\n  password\n}) => {\n  const data = {\n    email,\n    password\n  };\n  return dispatch => {\n    fetch(\"http://localhost:8084/api/users\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": `application/json`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      dispatch(loginSuccess(user));\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    fetch(`http://localhost:8084/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()) ///////////\n    .then(res => {\n      // res.verifyToken = \"\";\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n\n      if (user.verifyToken) {\n        console.log(\"true\");\n      } else if (!user.verifyToken) {\n        console.log(\"false\");\n      }\n\n      dispatch(loginSuccess(user));\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const verifyAuthentication = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:8084/verifyToken`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()) /////////////\n    .then(res => {\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      dispatch(loginSuccess(user));\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const verifyRefreshToken = () => {\n  return dispatch => {\n    fetch(`http://localhost:8084/refreshToken`, {\n      mothod: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      if (!res.verifyToken) {\n        dispatch(loginError());\n      }\n\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n\n      if (res.verifyToken) {\n        dispatch(loginSuccess(user));\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    fetch(\"http://localhost:5000/logout\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      console.log(\"here\");\n\n      if (res.status == 200) {\n        dispatch(loginError());\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersEditProfile = (data, verifyToken) => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.data,\n        verifyToken: res.verifyToken\n      };\n      dispatch(loginSuccess(user));\n      dispatch(editProfile());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const changePassword = data => {\n  return dispatch => {\n    fetch(`http://localhost:5000/ChangePassword`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUserDeleteAccount = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => {\n      dispatch(editProfile());\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const editProfile = () => {\n  return {\n    type: EDIT_PROFILE\n  };\n}; // export const fetchUsersData = (data) => {\n//   return (dispatch) => {\n//     dispatch(loginRequest());\n//     fetch(\"http://localhost:5000/MyAccount\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         dispatch(loginSuccess(data));\n//       })\n//       .catch((err) => {\n//         dispatch(loginError());\n//       });\n//   };\n// };\n// export const fetchUsersRegister_GET = (data) => {\n//   return (dispatch) => {\n//     fetch(`http://localhost:5000/register`, {\n//       method: \"GET\",\n//       body: JSON.stringify(),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       credentials: \"include\",\n//     })\n//       .then((res) => {\n//         if (res.status === 200) {\n//           dispatch(loginSuccess(data));\n//         } else {\n//           console.log(res);\n//           const error = new Error(res);\n//           throw error;\n//         }\n//       })\n//       .catch((err) => {\n//         dispatch(loginError(err));\n//       });\n//   };\n// };","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","EDIT_PROFILE","fetchUsersLogin","email","password","data","dispatch","fetch","method","headers","credentials","then","res","json","user","verifyToken","loginSuccess","catch","err","loginError","fetchUsersRegister","body","JSON","stringify","console","log","error","value","verifyAuthentication","authorization","verifyRefreshToken","mothod","logoutUser","status","fetchUsersEditProfile","editProfile","changePassword","fetchUserDeleteAccount","loginRequest","type","payload"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCES,\r\n  LOGIN_ERROR,\r\n  EDIT_PROFILE,\r\n} from \"./actionType\";\r\n\r\nexport const fetchUsersLogin = ({ email, password }) => {\r\n  const data = {\r\n    email,\r\n    password,\r\n  };\r\n  return (dispatch) => {\r\n    fetch(\"http://localhost:8084/api/users\", {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": `application/json` },\r\n       credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        dispatch(loginSuccess(user));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersRegister = (data) => {\r\n  return (dispatch) => {\r\n\r\n    fetch(`http://localhost:8084/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())///////////\r\n      .then((res) => {\r\n        // res.verifyToken = \"\";\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n        if (user.verifyToken) {\r\n          console.log(\"true\");\r\n        } else if (!user.verifyToken) {\r\n          console.log(\"false\");\r\n        }\r\n        dispatch(loginSuccess(user));\r\n      })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const verifyAuthentication = (verifyToken) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:8084/verifyToken`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())/////////////\r\n      .then((res) => {\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        dispatch(loginSuccess(user));\r\n      })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const verifyRefreshToken = () => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:8084/refreshToken`, {\r\n      mothod: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!res.verifyToken) {\r\n          dispatch(loginError());\r\n        }\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        if (res.verifyToken) {\r\n          dispatch(loginSuccess(user));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  return (dispatch) => {\r\n    fetch(\"http://localhost:5000/logout\", {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        console.log(\"here\");\r\n        if (res.status == 200) {\r\n          dispatch(loginError());\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersEditProfile = (data, verifyToken) => {\r\n\r\n  return (dispatch) => {\r\n\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const user = { data: res.data, verifyToken: res.verifyToken };\r\n\r\n        dispatch(loginSuccess(user));\r\n\r\n   \r\n        dispatch(editProfile());\r\n      })\r\n      .catch((err) => {\r\n\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const changePassword = (data) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/ChangePassword`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUserDeleteAccount = (verifyToken) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        dispatch(editProfile());\r\n\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const editProfile = () => {\r\n  return {\r\n    type: EDIT_PROFILE,\r\n  };\r\n};\r\n\r\n\r\n// export const fetchUsersData = (data) => {\r\n//   return (dispatch) => {\r\n//     dispatch(loginRequest());\r\n//     fetch(\"http://localhost:5000/MyAccount\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         dispatch(loginSuccess(data));\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError());\r\n//       });\r\n//   };\r\n// };\r\n\r\n\r\n\r\n// export const fetchUsersRegister_GET = (data) => {\r\n//   return (dispatch) => {\r\n\r\n//     fetch(`http://localhost:5000/register`, {\r\n//       method: \"GET\",\r\n//       body: JSON.stringify(),\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       credentials: \"include\",\r\n//     })\r\n//       .then((res) => {\r\n//         if (res.status === 200) {\r\n//           dispatch(loginSuccess(data));\r\n//         } else {\r\n//           console.log(res);\r\n//           const error = new Error(res);\r\n//           throw error;\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError(err));\r\n//       });\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}