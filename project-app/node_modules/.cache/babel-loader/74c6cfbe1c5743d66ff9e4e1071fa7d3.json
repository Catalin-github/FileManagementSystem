{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samuel M\\\\React\\\\Project\\\\project-app\\\\src\\\\components\\\\PrivateRoute.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport { verifyAuthentication, verifyRefreshToken } from \"../redux/Authentication/action\";\n\nconst PrivateRoute = ({\n  verifyAuthentication,\n  verifyRefreshToken,\n  isAuth,\n  loaded,\n  client,\n  loading,\n  component: Component,\n  ...rest\n}) => {\n  if (window.location.pathname === \"/account\" && client.data && !loaded) {\n    AccountRequest(client.data.email);\n  } else if (!loaded) {\n    verifyAuthentication();\n  }\n\n  if (!loaded) {\n    verifyAuthentication(client.verifyToken);\n  }\n\n  console.log(\"kkkkkk\");\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, \"Loading...\");\n  } else if (!loading) {\n    return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n      component: props => isAuth ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 20\n        }\n      })) : /*#__PURE__*/React.createElement(Redirect, {\n        exact: true,\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 47\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }));\n  }\n};\n\nconst mapStatetoProps = state => ({\n  isAuth: state.users.isAuth,\n  locales: state.locale.lang,\n  loaded: state.users.loaded,\n  client: state.users.user,\n  loading: state.users.loading\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    verifyRefreshToken: () => dispatch(verifyRefreshToken()),\n    verifyAuthentication: verifyToken => dispatch(verifyAuthentication(verifyToken))\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(PrivateRoute);","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/components/PrivateRoute.js"],"names":["React","connect","Route","Redirect","Home","verifyAuthentication","verifyRefreshToken","PrivateRoute","isAuth","loaded","client","loading","component","Component","rest","window","location","pathname","data","AccountRequest","email","verifyToken","console","log","props","mapStatetoProps","state","users","locales","locale","lang","user","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SACEC,oBADF,EAEEC,kBAFF,QAGO,gCAHP;;AAKA,MAAMC,YAAY,GAAG,CAAC;AACpBF,EAAAA,oBADoB;AAEpBC,EAAAA,kBAFoB;AAGpBE,EAAAA,MAHoB;AAIpBC,EAAAA,MAJoB;AAKpBC,EAAAA,MALoB;AAMpBC,EAAAA,OANoB;AAOpBC,EAAAA,SAAS,EAAEC,SAPS;AAQpB,KAAGC;AARiB,CAAD,KASf;AAEJ,MAAIC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,UAA7B,IAA2CP,MAAM,CAACQ,IAAlD,IAA0D,CAACT,MAA/D,EAAuE;AACrEU,IAAAA,cAAc,CAACT,MAAM,CAACQ,IAAP,CAAYE,KAAb,CAAd;AACD,GAFD,MAEO,IAAI,CAACX,MAAL,EAAa;AAClBJ,IAAAA,oBAAoB;AAAO;;AAC7B,MAAI,CAACI,MAAL,EAAa;AACVJ,IAAAA,oBAAoB,CAACK,MAAM,CAACW,WAAR,CAApB;AACD;;AACJC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AAEE,MAAIZ,OAAJ,EAAa;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFF,MAEQ,IAAI,CAACA,OAAL,EAAc;AAGpB,wBAEE,oBAAC,KAAD,oBACMG,IADN;AAEE,MAAA,SAAS,EAAGU,KAAD,IACThB,MAAM,gBAAG,oBAAC,SAAD,oBAAegB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,gBAA8B,oBAAC,QAAD;AAAU,QAAA,KAAK,MAAf;AAAgB,QAAA,EAAE,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF;AASD;AACF,CAnCD;;AAqCA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClClB,EAAAA,MAAM,EAAEkB,KAAK,CAACC,KAAN,CAAYnB,MADc;AAElCoB,EAAAA,OAAO,EAAEF,KAAK,CAACG,MAAN,CAAaC,IAFY;AAGlCrB,EAAAA,MAAM,EAAEiB,KAAK,CAACC,KAAN,CAAYlB,MAHc;AAIlCC,EAAAA,MAAM,EAAEgB,KAAK,CAACC,KAAN,CAAYI,IAJc;AAKlCpB,EAAAA,OAAO,EAAEe,KAAK,CAACC,KAAN,CAAYhB;AALa,CAAZ,CAAxB;;AAOA,MAAMqB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACL3B,IAAAA,kBAAkB,EAAE,MAAM2B,QAAQ,CAAC3B,kBAAkB,EAAnB,CAD7B;AAELD,IAAAA,oBAAoB,EAAGgB,WAAD,IACpBY,QAAQ,CAAC5B,oBAAoB,CAACgB,WAAD,CAArB;AAHL,GAAP;AAKD,CAND;;AAQA,eAAepB,OAAO,CAACwB,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CzB,YAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport {\r\n  verifyAuthentication,\r\n  verifyRefreshToken,\r\n} from \"../redux/Authentication/action\";\r\n\r\nconst PrivateRoute = ({\r\n  verifyAuthentication,\r\n  verifyRefreshToken,\r\n  isAuth,\r\n  loaded,\r\n  client,\r\n  loading,\r\n  component: Component,\r\n  ...rest\r\n}) => {\r\n\r\n  if (window.location.pathname === \"/account\" && client.data && !loaded) {\r\n    AccountRequest(client.data.email);\r\n  } else if (!loaded) {\r\n    verifyAuthentication();   }\r\n  if (!loaded) {\r\n     verifyAuthentication(client.verifyToken);\r\n   }\r\nconsole.log(\"kkkkkk\")\r\n\r\n  if (loading) {\r\n     return <h1>Loading...</h1>;\r\n   } else if (!loading) {\r\n    \r\n  \r\n    return ( \r\n\r\n      <Route\r\n        {...rest}\r\n        component={(props) =>\r\n          isAuth ? <Component {...props} /> : <Redirect exact to=\"/\" />\r\n        }\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  isAuth: state.users.isAuth,\r\n  locales: state.locale.lang,\r\n  loaded: state.users.loaded,\r\n  client: state.users.user,\r\n  loading: state.users.loading,\r\n});\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    verifyRefreshToken: () => dispatch(verifyRefreshToken()),\r\n    verifyAuthentication: (verifyToken) =>\r\n      dispatch(verifyAuthentication(verifyToken)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(PrivateRoute);\r\n"]},"metadata":{},"sourceType":"module"}