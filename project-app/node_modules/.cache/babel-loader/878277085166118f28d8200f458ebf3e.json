{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE } from \"./actionType\";\nimport axios from \"axios\";\nexport const fetchUsersLogin = (email, password) => {\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: 'dia-aplication/api/user/login',\n      data: {\n        email: email,\n        password: password\n      },\n      credentials: \"include\"\n    }) //  )\n    .then(res => {\n      console.log(res);\n      console.log(\"sadsdsadadadasdasdas\");\n\n      if (res.success === false) {\n        throw new Error('Email or password incorect!');\n      }\n\n      console.log(\"you are in login\");\n      console.log(res.data);\n      console.log(res.data.user);\n      console.log(res.data.dataUserResponse);\n      dispatch(loginSuccess({\n        data: res.data.dataUserResponse,\n        success: res.data.success,\n        message: res.data.message\n      }));\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()) ///////////\n    .then(res => {\n      console.log(res);\n      console.log(res.dataUserResponse);\n\n      if (res.success === false) {\n        throw new Error('Your data is invalid!');\n      }\n\n      dispatch(loginSuccess({\n        data: res.dataUserResponse,\n        message: res.message,\n        succes: res.success\n      }));\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const verifyAuthentication = verifyToken => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()) /////////////\n    .then(res => {\n      console.log(res);\n\n      if (!res.success) {\n        throw new Error('You are not authenticated!');\n      }\n\n      if (res.success) {\n        dispatch(loginSuccess({\n          data: res.dataUserResponse\n        }));\n      }\n\n      if (window.location.pathname === \"/account\") {\n        dispatch(loginRequest());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const verifyRefreshToken = () => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\n      mothod: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.dataUserResponse\n      };\n\n      if (res.verifyToken) {\n        dispatch(loginSuccess(user));\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    fetch(\"http://localhost:5000/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      console.log(\"here\");\n\n      if (res.status == 200) {\n        dispatch(loginError());\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersEditProfile = (data, verifyToken) => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      if (res.isAuthenticated) {}\n\n      dispatch(loginSuccess({\n        data: res.user\n      }));\n      dispatch(editProfile());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const changePassword = data => {\n  return dispatch => {\n    fetch(`http://localhost:5000/ChangePassword`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchLoginGoogle = res => {\n  return dispatch => {\n    axios({\n      url: '/dia-aplication/api/user/google',\n      headers: {\n        \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n        'Access-Control-Allow-Credentials': true,\n        'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        \"Vary\": \"Origin\",\n        \"Origin\": \"http://localhost:3000\",\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        token: res.tokenId\n      }\n    }).then(res => {\n      console.log(res);\n      console.log(\"you are in login2222222222222222222222222222222222222222222222222222222222222222222222\");\n      console.log(res.data);\n      console.log(res.data.user);\n      console.log(res.data.dataUserResponse); // dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.dta.success, message:res.data.message }));\n    }).catch(err => {\n      console.log(err + \"you are here\");\n      console.log(\"dssssssssssssssssssssssssssssssssssyou are here\");\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const fetchLoginFacebook = tokenId => {\n  return dispatch => {\n    fetch(\"/login/api/user/auth/facebook\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": `application/json`\n      },\n      body: JSON.stringify(tokenId),\n      credentials: \"include\"\n    }).then(res => {\n      return res.json();\n    }).then(res => {\n      if (res.success === false || res.message === \"\") {\n        throw new Error('Email or password incorect!');\n      }\n\n      dispatch(loginSuccess({\n        data: res.user,\n        success: res.success,\n        message: res.message\n      }));\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const AccountRequest = email => {\n  return dispatch => {\n    fetch(`/api/user/account?email=${email}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      if (res.status > 399) {\n        throw new Error('my error');\n      }\n\n      return res.json();\n    }).then(res => {\n      dispatch(loginSuccess({\n        data: res\n      }));\n    }).catch(err => {\n      console.log(err.message);\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUserDeleteAccount = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => {\n      dispatch(editProfile());\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const editProfile = () => {\n  return {\n    type: EDIT_PROFILE\n  };\n}; // export const resetValidation=()=>{\n//   return{\n//     type:RESET_VALIDATION\n//   }\n// }\n// export const fetchUsersData = (data) => {\n//   return (dispatch) => {\n//     dispatch(loginRequest());\n//     fetch(\"http://localhost:5000/MyAccount\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         dispatch(loginSuccess(data));\n//       })\n//       .catch((err) => {\n//         dispatch(loginError());\n//       });\n//   };\n// };\n// export const fetchUsersRegister_GET = (data) => {\n//   return (dispatch) => {\n//     fetch(`http://localhost:5000/register`, {\n//       method: \"GET\",\n//       body: JSON.stringify(),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       credentials: \"include\",\n//     })\n//       .then((res) => {\n//         if (res.status === 200) {\n//           dispatch(loginSuccess(data));\n//         } else {\n//           console.log(res);\n//           const error = new Error(res);\n//           throw error;\n//         }\n//       })\n//       .catch((err) => {\n//         dispatch(loginError(err));\n//       });\n//   };\n// };","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","EDIT_PROFILE","axios","fetchUsersLogin","email","password","dispatch","method","url","data","credentials","then","res","console","log","success","Error","user","dataUserResponse","loginSuccess","message","catch","err","loginError","fetchUsersRegister","fetch","body","JSON","stringify","headers","json","succes","error","value","verifyAuthentication","verifyToken","window","location","pathname","loginRequest","verifyRefreshToken","mothod","logoutUser","status","fetchUsersEditProfile","authorization","isAuthenticated","editProfile","changePassword","fetchLoginGoogle","token","tokenId","fetchLoginFacebook","AccountRequest","fetchUserDeleteAccount","type","payload"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCES,\r\n  LOGIN_ERROR,\r\n  EDIT_PROFILE,\r\n} from \"./actionType\";\r\nimport axios from \"axios\"\r\nexport const fetchUsersLogin = (email,password) => {\r\n  return (dispatch) => {\r\n    axios({\r\n      method: 'post',\r\n      url: 'dia-aplication/api/user/login',\r\n      data: {\r\n        email: email,\r\n        password: password\r\n      },\r\n      credentials:\"include\"\r\n    })\r\n    //  )\r\n  \r\n      .then((res) => {\r\n        console.log(res)\r\n        console.log(\"sadsdsadadadasdasdas\")\r\n        if(res.success === false){ \r\n          throw new Error('Email or password incorect!');\r\n        }       \r\n        console.log(\"you are in login\")\r\n        console.log(res.data)\r\n        console.log(res.data.user)\r\n        console.log(res.data.dataUserResponse)\r\n\r\n        dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.data.success, message:res.data.message }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n}\r\n\r\nexport const fetchUsersRegister = (data) => {\r\n  return (dispatch) => {\r\n\r\n    fetch(`/dia-aplication/api/user/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())///////////\r\n      .then((res) => {\r\n console.log(res)\r\n console.log(res.dataUserResponse)\r\n        if(res.success === false){ \r\n          throw new Error('Your data is invalid!');\r\n        }      \r\n        dispatch(loginSuccess({ data: res.dataUserResponse, message: res.message, succes:res.success}));\r\n      })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const verifyAuthentication = (verifyToken) => {\r\n  return (dispatch) => {\r\n  \r\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\r\n      method: \"GET\",\r\n      headers: {  \"Content-Type\": \"application/json\",   },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())/////////////\r\n      .then((res) => {\r\n        console.log(res)\r\n        if (!res.success) {\r\n          throw new Error('You are not authenticated!');\r\n        }\r\n\r\n        if (res.success) {\r\n          dispatch(loginSuccess({ data: res.dataUserResponse}));\r\n        }\r\n        if(window.location.pathname === \"/account\"){\r\n          dispatch(loginRequest() )\r\n        }\r\n      })\r\n\r\n      .catch((err) => {       \r\n        console.log(err)\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const verifyRefreshToken = () => {\r\n  return (dispatch) => {\r\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\r\n      mothod: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n   \r\n        const user = { data: res.dataUserResponse  };\r\n\r\n        if (res.verifyToken) {\r\n          dispatch(loginSuccess(user));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  return (dispatch) => {\r\n    fetch(\"http://localhost:5000/logout\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        console.log(\"here\");\r\n        if (res.status == 200) {\r\n          dispatch(loginError());\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersEditProfile = (data, verifyToken) => {\r\n\r\n  return (dispatch) => {\r\n\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if(res.isAuthenticated){}\r\n        dispatch(loginSuccess({ data: res.user }));\r\n\r\n   \r\n        dispatch(editProfile());\r\n      })\r\n      .catch((err) => {\r\n\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const changePassword = (data) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/ChangePassword`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchLoginGoogle = (res) => {\r\n  return (dispatch) => {\r\n    axios({\r\n       url: '/dia-aplication/api/user/google',\r\n      headers: {\"Access-Control-Allow-Origin\": \"http://localhost:3000\",'Access-Control-Allow-Credentials':true,'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\"Vary\": \"Origin\",\"Origin\":\"http://localhost:3000\", \"Content-Type\": \"application/json\"},\r\n      data: {  token: res.tokenId, } \r\n    }) \r\n      .then((res) => {\r\n        console.log(res)      \r\n        console.log(\"you are in login2222222222222222222222222222222222222222222222222222222222222222222222\")\r\n        console.log(res.data)\r\n        console.log(res.data.user)\r\n        console.log(res.data.dataUserResponse)\r\n  // dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.dta.success, message:res.data.message }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err+ \"you are here\")\r\n        console.log(\"dssssssssssssssssssssssssssssssssssyou are here\")\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchLoginFacebook = (tokenId) => {\r\n  return (dispatch) => {  \r\n    fetch(\"/login/api/user/auth/facebook\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": `application/json` },\r\n      body: JSON.stringify(tokenId),\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) =>{   \r\n      return res.json()\r\n      })\r\n      .then((res) => {\r\n        if(res.success === false || res.message === \"\"){ \r\n          throw new Error('Email or password incorect!');\r\n        }\r\n        dispatch(loginSuccess({ data: res.user, success: res.success, message:res.message }))\r\n             \r\n       })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const AccountRequest = (email) => {\r\n  return (dispatch) => {\r\n      fetch(`/api/user/account?email=${email}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) =>{  \r\n    if(res.status>399){\r\n     throw new Error('my error');\r\n    }\r\n       return res.json()\r\n      })\r\n      .then((res) => {\r\n        dispatch(loginSuccess({ data: res }));\r\n\r\n   \r\n      })\r\n      .catch((err) => {\r\n\r\n      console.log(err.message)\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchUserDeleteAccount = (verifyToken) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        dispatch(editProfile());\r\n\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const editProfile = () => {\r\n  return {\r\n    type: EDIT_PROFILE,\r\n  };\r\n};\r\n\r\n// export const resetValidation=()=>{\r\n//   return{\r\n//     type:RESET_VALIDATION\r\n//   }\r\n// }\r\n\r\n// export const fetchUsersData = (data) => {\r\n//   return (dispatch) => {\r\n//     dispatch(loginRequest());\r\n//     fetch(\"http://localhost:5000/MyAccount\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         dispatch(loginSuccess(data));\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError());\r\n//       });\r\n//   };\r\n// };\r\n\r\n\r\n\r\n// export const fetchUsersRegister_GET = (data) => {\r\n//   return (dispatch) => {\r\n\r\n//     fetch(`http://localhost:5000/register`, {\r\n//       method: \"GET\",\r\n//       body: JSON.stringify(),\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       credentials: \"include\",\r\n//     })\r\n//       .then((res) => {\r\n//         if (res.status === 200) {\r\n//           dispatch(loginSuccess(data));\r\n//         } else {\r\n//           console.log(res);\r\n//           const error = new Error(res);\r\n//           throw error;\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError(err));\r\n//       });\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}