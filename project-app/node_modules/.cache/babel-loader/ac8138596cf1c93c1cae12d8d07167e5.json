{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR, EDIT_PROFILE, REGISTER_SUCCESS } from \"./actionType\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport React, { Component } from 'react';\nimport Dashboard from \"../../components/Dashboard\"; //import { useHistory } from \"react-router-dom\";\n// const history = useHistory();\n// export const fetchUsersLogin = (data) => {\n//   return (dispatch) => {\n//     console.log(data.email)\n//     console.log(data.password)\n//     axios({\n//       method: 'POST',\n//       url: '/dia-aplication/api/user/login',\n//       headers: { \"Content-Type\": \"application/json\",\n//     \"Access-Control-Allow-Origin\":\"localhost:3000/\" },\n//       data: {\n//         email: data.email,\n//         password: data.password\n//       },\n//       credentials:\"include\"\n//     }) \n//       .then((res) => {\n//         console.log(res)\n//         console.log(\"sadsdsadadadasdasdas\")\n//         if(res.success === false){ \n//           throw new Error('Email or password incorect!');\n//         }       \n//         console.log(\"you are in login\")\n//         console.log(res.data)\n//          console.log(res.data.dataUserResponse)\n//         dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.data.success, message:res.data.message }));\n//       })\n//       .catch((err) => {\n//         console.log(err)\n//         dispatch(loginError(\"Login Failed, Please Try Again\"));\n//       });\n//   };\n// }\n\nexport const fetchUsersLogin = data => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/login`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    }).then(res => res.json()) ///////////\n    .then(res => {\n      console.log(res);\n      console.log(res.dataUserResponse);\n      console.log(res.dataUserResponse.firstName);\n\n      if (res.success === false) {\n        throw new Error('Your data is invalid!');\n      }\n\n      dispatch(registerSuccess({\n        data: res.dataUserResponse,\n        message: res.message,\n        succes: res.success\n      })); //    history.push(\"/\");\n      // return( <Redirect exact to=\"/dashboard\"/>)\n\n      console.log('true');\n      return true;\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()) ///////////\n    .then(res => {\n      console.log(res);\n      console.log(res.dataUserResponse);\n      console.log(res.dataUserResponse.firstName);\n\n      if (res.success === false) {\n        throw new Error('Your data is invalid!');\n      }\n\n      dispatch(registerSuccess({\n        data: res.dataUserResponse,\n        message: res.message,\n        succes: res.success\n      })); //    history.push(\"/\");\n      // return( <Redirect exact to=\"/dashboard\"/>)    \n\n      console.log(\"true\");\n      return true;\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const verifyAuthentication = () => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n\n      if (!res.success) {\n        throw new Error('You are not authenticated!');\n      }\n\n      if (res.success) {\n        dispatch(loginSuccess({\n          data: res.dataUserResponse\n        }));\n      }\n\n      if (window.location.pathname === \"/account\") {\n        dispatch(loginRequest());\n      }\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const verifyRefreshToken = () => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\n      mothod: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      const user = {\n        data: res.dataUserResponse\n      };\n\n      if (res.verifyToken) {\n        dispatch(loginSuccess(user));\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    fetch(\"/dia-aplication/api/user/logout\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(\"here\");\n\n      if (res.success == true) {\n        dispatch(loginError(res.message));\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUsersEditProfile = data => {\n  return dispatch => {\n    console.log(\"edit \");\n    fetch(`/dia-aplication/api/user/update`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      if (res.success === false) {\n        throw new Error('Your data is invalid!');\n      }\n\n      if (res.success == true) {}\n\n      dispatch(loginSuccess({\n        data: res.dataUserResponse\n      }));\n      dispatch(editProfile());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const changePassword = data => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/reset-password?token=${data.token}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        password: data.password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const requestChangePassword = email => {\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/request-reset-password`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: email\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchLoginGoogle = res => {\n  console.log(\"res\");\n  console.log(res.tokenId);\n  console.log(res.profileObj.email);\n  return dispatch => {\n    axios({\n      method: 'POST',\n      url: '/dia-aplication/api/user/google',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: {\n        email: res.profileObj.email,\n        token: res.tokenId\n      },\n      credentials: \"include\"\n    }).then(res => {\n      console.log(res);\n      console.log(\"you are in logi22222\");\n      console.log(res.data);\n      console.log(res.data.user);\n      console.log(res.data.dataUserResponse);\n      dispatch(loginSuccess({\n        data: res.data.dataUserResponse,\n        success: res.success,\n        message: res.data.message\n      }));\n    }).catch(err => {\n      console.log(err + \"you are here\");\n      console.log(\"dssssssssssssssssssssssssssssssssssyou are here\");\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const fetchLoginFacebook = res => {\n  console.log(res.accessToken);\n  return dispatch => {\n    fetch(\"/dia-aplication/api/user/facebook\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": `application/json`\n      },\n      body: JSON.stringify({\n        email: res.email,\n        firstName: res.name.split(\" \")[0],\n        lastName: res.name.split(\" \")[1],\n        token: res.accessToken\n      }),\n      credentials: \"include\"\n    }).then(res => {\n      return res.json();\n    }).then(res => {\n      console.log(\"faaacebooook\");\n\n      if (res.success === false || res.message === \"\") {\n        throw new Error('Email or password incorect!');\n      }\n\n      dispatch(loginSuccess({\n        data: res.dataUserResponse,\n        success: res.success,\n        message: res.message\n      }));\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(\"Login Failed, Please Try Again\"));\n    });\n  };\n};\nexport const AccountRequest = email => {\n  console.log(\"before acc\");\n  return dispatch => {\n    fetch(`/dia-aplication/api/user/account`, {\n      method: \"POST\",\n      body: JSON.stringify(email),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => res.json()).then(res => {\n      console.log(\"accccc\");\n\n      if (res.success == false) {\n        throw new Error('my error');\n      }\n\n      console.log(res.dataUserResponse);\n      dispatch(loginSuccess({\n        data: res.dataUserResponse,\n        success: res.success\n      }));\n    }).catch(err => {\n      console.log(err.message);\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const fetchUserDeleteAccount = verifyToken => {\n  return dispatch => {\n    fetch(`http://localhost:5000/MyAccount`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Baerer ${verifyToken}`\n      },\n      credentials: \"include\"\n    }).then(res => {\n      dispatch(editProfile());\n      dispatch(loginError());\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};\nexport const editProfile = () => {\n  return {\n    type: EDIT_PROFILE\n  };\n};\nexport const registerSuccess = res => {\n  return {\n    type: REGISTER_SUCCESS,\n    payload: res\n  };\n}; // export const resetValidation=()=>{\n//   return{\n//     type:RESET_VALIDATION\n//   }\n// }\n// export const fetchUsersData = (data) => {\n//   return (dispatch) => {\n//     dispatch(loginRequest());\n//     fetch(\"http://localhost:5000/MyAccount\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         dispatch(loginSuccess(data));\n//       })\n//       .catch((err) => {\n//         dispatch(loginError());\n//       });\n//   };\n// };\n// export const fetchUsersRegister_GET = (data) => {\n//   return (dispatch) => {\n//     fetch(`http://localhost:5000/register`, {\n//       method: \"GET\",\n//       body: JSON.stringify(),\n//       headers: { \"Content-Type\": \"application/json\" },\n//       credentials: \"include\",\n//     })\n//       .then((res) => {\n//         if (res.status === 200) {\n//           dispatch(loginSuccess(data));\n//         } else {\n//           console.log(res);\n//           const error = new Error(res);\n//           throw error;\n//         }\n//       })\n//       .catch((err) => {\n//         dispatch(loginError(err));\n//       });\n//   };\n// };","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","EDIT_PROFILE","REGISTER_SUCCESS","axios","Redirect","React","Component","Dashboard","fetchUsersLogin","data","dispatch","fetch","method","body","JSON","stringify","headers","credentials","then","res","json","console","log","dataUserResponse","firstName","success","Error","registerSuccess","message","succes","catch","err","loginError","error","value","fetchUsersRegister","verifyAuthentication","loginSuccess","window","location","pathname","loginRequest","verifyRefreshToken","mothod","user","verifyToken","logoutUser","fetchUsersEditProfile","editProfile","changePassword","token","password","requestChangePassword","email","fetchLoginGoogle","tokenId","profileObj","url","fetchLoginFacebook","accessToken","name","split","lastName","AccountRequest","fetchUserDeleteAccount","authorization","type","payload"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCES,\r\n  LOGIN_ERROR,\r\n  EDIT_PROFILE,\r\n  REGISTER_SUCCESS\r\n} from \"./actionType\";\r\nimport axios from \"axios\"\r\nimport { Redirect } from \"react-router-dom\";\r\nimport React, { Component }  from 'react';\r\nimport Dashboard from \"../../components/Dashboard\";\r\n//import { useHistory } from \"react-router-dom\";\r\n// const history = useHistory();\r\n\r\n\r\n// export const fetchUsersLogin = (data) => {\r\n//   return (dispatch) => {\r\n//     console.log(data.email)\r\n//     console.log(data.password)\r\n//     axios({\r\n//       method: 'POST',\r\n//       url: '/dia-aplication/api/user/login',\r\n//       headers: { \"Content-Type\": \"application/json\",\r\n//     \"Access-Control-Allow-Origin\":\"localhost:3000/\" },\r\n\r\n//       data: {\r\n//         email: data.email,\r\n//         password: data.password\r\n//       },\r\n//       credentials:\"include\"\r\n//     }) \r\n//       .then((res) => {\r\n//         console.log(res)\r\n//         console.log(\"sadsdsadadadasdasdas\")\r\n//         if(res.success === false){ \r\n//           throw new Error('Email or password incorect!');\r\n//         }       \r\n//         console.log(\"you are in login\")\r\n//         console.log(res.data)\r\n//          console.log(res.data.dataUserResponse)\r\n\r\n//         dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.data.success, message:res.data.message }));\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err)\r\n//         dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n//       });\r\n//   };\r\n// }\r\nexport const fetchUsersLogin = (data) => {\r\n\treturn (dispatch) => {\r\n\t\tfetch(`/dia-aplication/api/user/login`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify(data),\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tcredentials: 'include',\r\n\t\t})\r\n\t\t\t.then((res) => res.json()) ///////////\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tconsole.log(res.dataUserResponse);\r\n\t\t\t\tconsole.log(res.dataUserResponse.firstName);\r\n\r\n\t\t\t\tif (res.success === false) {\r\n\t\t\t\t\tthrow new Error('Your data is invalid!');\r\n\t\t\t\t}\r\n\t\t\t\tdispatch(\r\n\t\t\t\t\tregisterSuccess({\r\n\t\t\t\t\t\tdata: res.dataUserResponse,\r\n\t\t\t\t\t\tmessage: res.message,\r\n\t\t\t\t\t\tsucces: res.success,\r\n\t\t\t\t\t}),\r\n\t\t\t\t);\r\n\t\t\t\t//    history.push(\"/\");\r\n\t\t\t\t// return( <Redirect exact to=\"/dashboard\"/>)\r\n\t\t\t\tconsole.log('true');\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tdispatch(loginError(err));\r\n\t\t\t\tconsole.error(err.value);\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\n\r\n\r\n\r\nexport const fetchUsersRegister =   (data) => {\r\n  return  (dispatch) => {\r\n\r\n      fetch(`/dia-aplication/api/user/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n       .then((res) => res.json())///////////\r\n      .then((res) => {\r\n console.log(res)\r\n console.log(res.dataUserResponse)\r\n console.log(res.dataUserResponse.firstName)\r\n\r\n if(res.success === false){ \r\n          throw new Error('Your data is invalid!');\r\n        }      \r\n        dispatch(registerSuccess({ data: res.dataUserResponse, message: res.message, succes:res.success}));\r\n  //    history.push(\"/\");\r\n           // return( <Redirect exact to=\"/dashboard\"/>)    \r\n           console.log(\"true\")\r\n     return true\r\n    })\r\n\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const verifyAuthentication = ( ) => {\r\n  return (dispatch) => {\r\n  \r\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\r\n      method: \"GET\",\r\n      headers: {  \"Content-Type\": \"application/json\",   },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json()) \r\n      .then((res) => {\r\n        console.log(res)\r\n        if (!res.success) {\r\n          throw new Error('You are not authenticated!');\r\n        }\r\n\r\n        if (res.success) {\r\n          dispatch(loginSuccess({ data: res.dataUserResponse}));\r\n        }\r\n        if(window.location.pathname === \"/account\"){\r\n          dispatch(loginRequest() )\r\n        }\r\n      })\r\n\r\n      .catch((err) => {       \r\n        console.log(err)\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const verifyRefreshToken = () => {\r\n  return (dispatch) => {\r\n    fetch(`/dia-aplication/api/user/isAuthenticated`, {\r\n      mothod: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n   \r\n        const user = { data: res.dataUserResponse  };\r\n\r\n        if (res.verifyToken) {\r\n          dispatch(loginSuccess(user));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  return (dispatch) => {\r\n    fetch(\"/dia-aplication/api/user/logout\", {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n    .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(\"here\");\r\n        if (res.success == true) {\r\n          dispatch(loginError(res.message));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchUsersEditProfile = (data) => {\r\n\r\n  return (dispatch) => {\r\nconsole.log(\"edit \")\r\n    fetch(`/dia-aplication/api/user/update`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if(res.success === false){ \r\n          throw new Error('Your data is invalid!');\r\n        }     \r\n        if(res.success==true){}\r\n        dispatch(loginSuccess({ data: res.dataUserResponse }));\r\n\r\n   \r\n        dispatch(editProfile());\r\n      })\r\n      .catch((err) => {\r\n\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const changePassword = (data) => {\r\n  return (dispatch) => {\r\n    fetch(`/dia-aplication/api/user/reset-password?token=${data.token}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({password:data.password}),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const requestChangePassword = (email) => {\r\n  return (dispatch) => {\r\n    fetch(`/dia-aplication/api/user/request-reset-password`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({email:email}),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchLoginGoogle = (res) => {\r\n  console.log(\"res\")\r\n  console.log(res.tokenId)\r\n  console.log(res.profileObj.email)\r\n  return (dispatch) => {\r\n    axios({\r\n      method: 'POST',\r\n       url: '/dia-aplication/api/user/google',\r\n        headers: { \"Content-Type\": \"application/json\"},\r\n      data: { email:res.profileObj.email,\r\n              token:res.tokenId  } ,\r\n      credentials: \"include\"\r\n    }) \r\n      .then((res) => {\r\n        console.log(res)      \r\n        console.log(\"you are in logi22222\")\r\n        console.log(res.data)\r\n        console.log(res.data.user)\r\n        console.log(res.data.dataUserResponse)\r\n  dispatch(loginSuccess({ data: res.data.dataUserResponse, success: res.success, message:res.data.message }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err+ \"you are here\")\r\n        console.log(\"dssssssssssssssssssssssssssssssssssyou are here\")\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchLoginFacebook = (res) => {\r\n  console.log(res.accessToken)\r\n  return (dispatch) => {  \r\n    fetch(\"/dia-aplication/api/user/facebook\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": `application/json` },\r\n      body: JSON.stringify({email:res.email,\r\n                            firstName:res.name.split(\" \")[0],\r\n                            lastName:res.name.split(\" \")[1],\r\n                            token:res.accessToken}),\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) =>{   \r\n      return res.json()\r\n      })\r\n      .then((res) => {\r\n        console.log(\"faaacebooook\")\r\n        if(res.success === false || res.message === \"\"){ \r\n          throw new Error('Email or password incorect!');\r\n        }\r\n        dispatch(loginSuccess({ data: res.dataUserResponse, success: res.success, message:res.message }))\r\n             \r\n       })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        dispatch(loginError(\"Login Failed, Please Try Again\"));\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const AccountRequest = (email) => {\r\n  console.log(\"before acc\")\r\n  return (dispatch) => {\r\n      fetch(`/dia-aplication/api/user/account`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(email),\r\n       headers: {  \"Content-Type\": \"application/json\"},\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(\"accccc\")\r\n        if(res.success==false){\r\n          throw new Error('my error');\r\n         }\r\n        console.log(res.dataUserResponse)\r\n        dispatch(loginSuccess({ data: res.dataUserResponse ,success: res.success}));\r\n\r\n   \r\n      })\r\n      .catch((err) => {\r\n\r\n      console.log(err.message)\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchUserDeleteAccount = (verifyToken) => {\r\n  return (dispatch) => {\r\n    fetch(`http://localhost:5000/MyAccount`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Baerer ${verifyToken}`,\r\n      },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        dispatch(editProfile());\r\n\r\n        dispatch(loginError());\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\nexport const editProfile = () => {\r\n  return {\r\n    type: EDIT_PROFILE,\r\n  };\r\n};\r\nexport const registerSuccess = (res) => {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n    payload: res,\r\n  };\r\n};\r\n\r\n// export const resetValidation=()=>{\r\n//   return{\r\n//     type:RESET_VALIDATION\r\n//   }\r\n// }\r\n\r\n// export const fetchUsersData = (data) => {\r\n//   return (dispatch) => {\r\n//     dispatch(loginRequest());\r\n//     fetch(\"http://localhost:5000/MyAccount\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         dispatch(loginSuccess(data));\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError());\r\n//       });\r\n//   };\r\n// };\r\n\r\n\r\n\r\n// export const fetchUsersRegister_GET = (data) => {\r\n//   return (dispatch) => {\r\n\r\n//     fetch(`http://localhost:5000/register`, {\r\n//       method: \"GET\",\r\n//       body: JSON.stringify(),\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       credentials: \"include\",\r\n//     })\r\n//       .then((res) => {\r\n//         if (res.status === 200) {\r\n//           dispatch(loginSuccess(data));\r\n//         } else {\r\n//           console.log(res);\r\n//           const error = new Error(res);\r\n//           throw error;\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         dispatch(loginError(err));\r\n//       });\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}