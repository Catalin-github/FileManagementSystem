{"ast":null,"code":"import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR } from \"./actionType\"; // import cookie from \"js-cookie\";\n//  USER POST LOGIN LOGIN LOGIN\n//  USER POST LOGIN LOGIN LOGIN\n//  USER POST LOGIN LOGIN LOGIN\n\nexport const fetchUsersLogin = ({\n  email,\n  password\n}) => {\n  const data = {\n    email,\n    password\n  };\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(res => {\n      if (res.status === 200) {\n        console.log(data);\n        dispatch(loginSuccess({\n          email,\n          password\n        }));\n      } else {\n        const error = new Error(res);\n        throw error;\n      }\n\n      console.log(res.status);\n    }).catch(err => {\n      dispatch(loginError(err));\n    });\n  };\n}; // USER REGISTER REGISTER REGISTER POST \n// USER REGISTER REGISTER REGISTER POST \n// USER REGISTER REGISTER REGISTER POST \n\nexport const fetchUsersRegister = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:5000/register`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      if (res.status === 200) {\n        console.log(\"Succes\");\n        dispatch(loginSuccess(data));\n        console.log(\"Succes\");\n        console.log(\"Succes\");\n      } else {\n        console.log(res);\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n}; // GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\n\nexport const fetchUsersData = data => {\n  return dispatch => {\n    dispatch(this.loginRequest());\n    fetch(\"http://localhost:5000/MyAccount\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch(this.loginSuccess());\n      } else {\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError());\n      console.error(err.value);\n    });\n  };\n}; // GET GET  REGISTER REGISTER REGISTER\n// GET GET  REGISTER REGISTER REGISTER\n// GET GET  REGISTER REGISTER REGISTER\n// GET GET  REGISTER REGISTER REGISTER\n\nexport const fetchUsersRegister_GET = data => {\n  return dispatch => {\n    dispatch(loginRequest());\n    fetch(`http://localhost:5000/register`, {\n      method: \"GET\",\n      body: JSON.stringify(),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    }).then(res => {\n      // cookie.set(\"token\", res.data.access_token);\n      // cookie.set(\"user\", res.data.user);\n      //////// this.props.history.push(\"/profile\");\n      console.log(data);\n\n      if (res.status === 200) {\n        console.log(\"Succes\");\n        dispatch(loginSuccess(data));\n        console.log(\"Succes\");\n        console.log(\"Succes\");\n      } else {\n        console.log(res);\n        const error = new Error(res);\n        throw error;\n      }\n    }).catch(err => {\n      dispatch(loginError(err));\n      console.error(err.value);\n    });\n  };\n};\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport const loginSuccess = res => {\n  return {\n    type: LOGIN_SUCCES,\n    payload: res\n  };\n};\nexport const loginError = err => {\n  return {\n    type: LOGIN_ERROR,\n    payload: err\n  };\n};","map":{"version":3,"sources":["C:/Users/Samuel M/React/Project/project-app/src/redux/Authentication/action.js"],"names":["React","Redirect","LOGIN_REQUEST","LOGIN_SUCCES","LOGIN_ERROR","fetchUsersLogin","email","password","data","dispatch","loginRequest","fetch","method","headers","body","JSON","stringify","then","res","status","console","log","loginSuccess","error","Error","catch","err","loginError","fetchUsersRegister","credentials","value","fetchUsersData","fetchUsersRegister_GET","type","payload"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { LOGIN_REQUEST, LOGIN_SUCCES, LOGIN_ERROR } from \"./actionType\";\r\n// import cookie from \"js-cookie\";\r\n\r\n\r\n\r\n\r\n\r\n//  USER POST LOGIN LOGIN LOGIN\r\n//  USER POST LOGIN LOGIN LOGIN\r\n//  USER POST LOGIN LOGIN LOGIN\r\nexport const fetchUsersLogin = ({ email, password }) => {\r\n  const data = {\r\n    email,\r\n    password,\r\n  };\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n    fetch(\"http://localhost:5000/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => {\r\n       \r\n        if (res.status === 200) {\r\n          console.log(data);\r\n          dispatch(loginSuccess({ email, password }));\r\n        } else {\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n        console.log(res.status);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// USER REGISTER REGISTER REGISTER POST \r\n// USER REGISTER REGISTER REGISTER POST \r\n// USER REGISTER REGISTER REGISTER POST \r\nexport const fetchUsersRegister = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n\r\n    fetch(`http://localhost:5000/register`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n\r\n        if (res.status === 200) {\r\n          console.log(\"Succes\");\r\n          dispatch(loginSuccess(data));\r\n          console.log(\"Succes\");\r\n          console.log(\"Succes\");\r\n        } else {\r\n          console.log(res);\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\r\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\r\n// GET GET  My ACCOUNT My ACCOUNT My ACCOUNT\r\nexport const fetchUsersData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(this.loginRequest());\r\n    fetch(\"http://localhost:5000/MyAccount\", {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then((res) => {\r\n\r\n        if (res.status === 200) {\r\n          dispatch(this.loginSuccess());\r\n        } else {\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError());\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\n// GET GET  REGISTER REGISTER REGISTER\r\n// GET GET  REGISTER REGISTER REGISTER\r\n// GET GET  REGISTER REGISTER REGISTER\r\n// GET GET  REGISTER REGISTER REGISTER\r\nexport const fetchUsersRegister_GET = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(loginRequest());\r\n\r\n    fetch(`http://localhost:5000/register`, {\r\n      method: \"GET\",\r\n      body: JSON.stringify(),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => {\r\n        // cookie.set(\"token\", res.data.access_token);\r\n        // cookie.set(\"user\", res.data.user);\r\n        //////// this.props.history.push(\"/profile\");\r\n        console.log(data);\r\n        if (res.status === 200) {\r\n          console.log(\"Succes\");\r\n\r\n          dispatch(loginSuccess(data));\r\n          console.log(\"Succes\");\r\n\r\n          console.log(\"Succes\");\r\n        } else {\r\n          console.log(res);\r\n          const error = new Error(res);\r\n          throw error;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginError(err));\r\n        console.error(err.value);\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const loginRequest = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const loginSuccess = (res) => {\r\n  return {\r\n    type: LOGIN_SUCCES,\r\n    payload: res,\r\n  };\r\n};\r\n\r\nexport const loginError = (err) => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n    payload: err,\r\n  };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}